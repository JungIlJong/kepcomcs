<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kepco.app.home.mapper.CUBoardMapper">

	<resultMap id="detailMap"
               type="com.kepco.app.domain.ntt.dto.SearchMberNtt$NttDetail">
        <id property="id" column="NTT_ID" />
        <result property="rdcnt" column="RDCNT" />
        <result property="nttSj" column="NTT_SJ" />
        <result property="nttCn" column="NTT_CN" />
        <result property="frstRegistDt" column="FRST_REGIST_DT" />
        <result property="wrterNm" column="WRTER_NM" />
        <result property="secret" column="SECRET" />
        <result property="notice" column="NOTICE" />
        <result property="mine" column="MINE" />
        <result property="anonymousWriter" column="ANONYMOUS_WRITER" />
        <result property="password" column="PASSWORD" />
        <result property="bbsNm" column="BBS_NM" />
        <result property="nttStatus" column="NTT_STATUS" />
        <result property="nttReply" column="NTT_REPLY" />
        <result property="email" column="EMAIL" />
        <result property="authorHp" column="PHONE" />
        <result property="opinionTitleHead" column="OPINION_TITLE_HEAD" />
        <result property="linkUrl" column="LINK_URL" />
        <association
                property="replyDetail"
                javaType="com.kepco.app.domain.ntt.dto.SearchMberNtt$ReplyDetail">
            <id property="id" column="REPLY_NTT_ID" />
            <result property="nttSj" column="REPLY_NTT__SJ" />
            <result property="nttCn" column="REPLY_NTT_CN" />
            <result property="frstRegistDt" column="REPLY_FRST_REGIST_DT" />
            <result property="wrterNm" column="REPLY_WRTER_NM" />
            <collection property="files"
                        ofType="com.kepco.app.domain.ntt.dto.SearchMberNtt$FileInfo">
                <id property="id" column="REPLY_ATCH_FILE_ID" />
                <result property="name" column="REPLY_FILE_NM" />
            </collection>
        </association>
        <collection
                property="files"
                ofType="com.kepco.app.domain.ntt.dto.SearchMberNtt$FileInfo">
            <id property="atchFileId" column="ATCH_FILE_ID" />
            <result property="orignlFileNm" column="ORIGNL_FILE_NM" />
        </collection>
    </resultMap>
    
	<select id="getBoardList_origin" parameterType="HashMap" resultType="HashMap">
		SELECT 
			a.board_no, 
			a.board_title, 
			a.board_content, 
			a.board_status, 
			DATE_FORMAT(a.insert_dt,'%Y-%m-%d') insert_dt,
			a.insert_id, 
			DATE_FORMAT(a.update_dt,'%Y-%m-%d') update_dt,
			a.update_id,
			ifnull(a.file_name, '') file_name,
			ifnull(max(b.file_name),'') file_name2
		FROM board a  left outer join tbl_board_files b on a.board_no = b.board_no
		where 1 = 1
		  and board_type = #{board_type}
		  and USE_AT = 'Y'
		  and del_yn = 'N'
	   <if test="sSearch != null and sSearch != ''">
			  and (a.board_title like CONCAT('%', #{sSearch}, '%') 
			  	or a.board_content like CONCAT('%', #{sSearch}, '%')
			  )
		</if>
		group by a.board_no
		<if test="orderCol != null and orderCol != ''">
			order by ${orderCol} ${sSortDir_0},a.insert_dt desc
		</if>
		<!-- <if test="orderCol == null and orderCol == ''"> -->
			order by a.insert_dt desc
		<!-- </if> -->
		<if test="iDisplayStart != null and iDisplayStart != '' and iDisplayLength != null and iDisplayLength != ''">
			limit ${iDisplayStart}, ${iDisplayLength}
		</if>
	</select>
	
	<select id="getBoardList" parameterType="HashMap" resultType="HashMap">
	<![CDATA[
		SELECT 
			A.NTT_ID AS board_no, 
			A.BBS_ID AS bbsId,
			A.NTT_STATUS AS board_status,
			EXISTS(SELECT 1 FROM VST_NTT D WHERE D.PARNTSCTT_ID = A.NTT_ID) PARNTSCTT_ID,
			A.NTT_SJ AS board_title, 
			A.RDCNT AS rdcnt,
            A.SECRET_AT AS secret_at,
            A.NOTICE_AT AS notice_at,
			A.NTT_CN AS board_content, 
			A.NTT_STATUS AS board_status,
			A.WRTER_NM AS wrter_nm,
			DATE_FORMAT(A.NTT_START_DT,'%Y-%m-%d') AS ntt_start_dt,
			DATE_FORMAT(A.NTT_END_DT,'%Y-%m-%d') AS ntt_end_dt,
			CASE 
		        WHEN CURDATE() < NTT_START_DT THEN '채용예정'
		        WHEN CURDATE() BETWEEN NTT_START_DT AND NTT_END_DT THEN '채용중'
		        WHEN CURDATE() > NTT_END_DT THEN '채용마감'
		        ELSE '상태없음'
		    END AS status,
			DATE_FORMAT(A.FRST_REGIST_DT,'%Y-%m-%d') insert_dt,
			A.FRST_REGISTER_ID AS insert_id, 
			DATE_FORMAT(A.LAST_UPDT_DT,'%Y-%m-%d') update_dt,
			A.LAST_UPDUSR_ID AS update_id,
			A.THUMB_URL AS thumb_url,
			(SELECT ATCH_FILE_ID FROM VST_ATCHFILE T WHERE T.UPPER_ID = A.NTT_ID ORDER BY ATCH_FILE_ID LIMIT 1) AS atch_file_id,
			B.FILE_AT AS file_at,
			B.CARD_AT AS card_at
		FROM VST_NTT A  
		LEFT OUTER JOIN VST_BBS B ON A.BBS_ID = B.BBS_ID
		WHERE 1 = 1
		  AND A.BBS_ID = #{board_type}
		  AND A.USE_AT = 'Y'
	  ]]>
	   <if test="sSearch != null and sSearch != ''">
			  AND (A.NTT_SJ like CONCAT('%', #{sSearch}, '%') 
			  	OR A.NTT_CN like CONCAT('%', #{sSearch}, '%')
			  )
		</if>
		<if test="orderCol != null and orderCol != ''">
			ORDER BY ${orderCol} ${sSortDir_0},A.NTT_ID DESC
		</if>
		<!-- <if test="orderCol == null and orderCol == ''"> -->
			ORDER BY A.NTT_ID DESC
		<!-- </if> -->
		<if test="iDisplayStart != null and iDisplayStart != '' and iDisplayLength != null and iDisplayLength != ''">
			LIMIT ${iDisplayStart}, ${iDisplayLength}
		</if>
	</select>

	<!-- 카드 게시판 목록 조회 -->
	<select id="getBoardCardList" parameterType="HashMap" resultType="HashMap">
		SELECT a.board_no,
		       a.board_title,
		       a.board_content,
		       a.board_status,
		       DATE_FORMAT(a.insert_dt,'%Y-%m-%d') insert_dt,
		       a.insert_id,
		       DATE_FORMAT(a.update_dt,'%Y-%m-%d') update_dt,
		       a.update_id,
		       DATE_FORMAT(a.post_start_dt,'%Y-%m-%d') post_start_dt,
		       DATE_FORMAT(a.post_end_dt,'%Y-%m-%d') post_end_dt,
		       CASE
		           WHEN now() &gt; a.post_start_dt and now() &lt; a.post_end_dt THEN '채용중'
		           WHEN now() &lt; a.post_start_dt THEN '채용전'
		           WHEN now() &gt; a.post_end_dt THEN '채용마감'
		           END AS recruit_status,
		    main_img_file_name,
		    detail_img_file_name,
		    IFNULL(a.link_url, '') link_url
		FROM board a
		WHERE board_type = #{board_type}
		  AND USE_AT = 'Y'
		  AND del_yn = 'N'
		<if test="sSearch != null and sSearch != ''">
			AND (a.board_title LIKE CONCAT('%', #{sSearch}, '%')
			OR a.board_content LIKE CONCAT('%', #{sSearch}, '%')
			)
		</if>
		ORDER BY a.insert_dt DESC
		<if test='board_type != null and board_type != "" and (board_type.equals("2") or board_type.equals("18"))'>
			limit ${iDisplayStart}, ${iDisplayLength}
		</if>
	</select>
	
	<select id="getBoardListCount" parameterType="HashMap" resultType="Integer">
		SELECT count(C.NTT_ID)
		FROM (
		SELECT A.NTT_ID
		FROM VST_NTT A  LEFT OUTER JOIN VST_ATCHFILE B ON A.NTT_ID = B.UPPER_ID AND B.FILE_SE = 'ntt'
		WHERE A.BBS_ID = #{board_type}
		  AND A.USE_AT = 'Y'
	   <if test="sSearch != null and sSearch != ''">
		   and (A.NTT_SJ like CONCAT('%', #{sSearch}, '%') 
			  	or A.NTT_CN like CONCAT('%', #{sSearch}, '%')
			  )
		</if>
		GROUP BY A.NTT_ID ) C
	</select>
	
	<select id="getBoardView_origin" parameterType="HashMap" resultType="HashMap">
		SELECT 
			a.board_no, 
			a.board_title, 
			a.board_content, 
			a.reply_content,
			a.board_status, 
			DATE_FORMAT(a.insert_dt,'%Y-%m-%d') insert_dt,
			a.insert_id, 
			DATE_FORMAT(a.update_dt,'%Y-%m-%d') update_dt,
			a.update_id,
			a.name,
			a.link_url,
			a.phone,
			a.main_img_file_name
		FROM board a
		where 1=1
		  and board_type = #{board_type}
		  and board_no = #{board_no}
		  and board_pwd = #{board_pwd}
		  and USE_AT = 'Y'
		  and del_yn = 'N'
	</select>

	<select id="getBoardView" parameterType="HashMap" resultMap="detailMap">
		SELECT
            VN.NTT_ID,
            VN.NTT_SJ,
            VN.NTT_CN,
            CAST(DATE_FORMAT(VN.FRST_REGIST_DT, '%Y-%m-%d') AS CHAR) AS FRST_REGIST_DT,
            VN.WRTER_NM,
            (VN.RDCNT + 1) RDCNT,
            VN.NTT_STATUS,
            VN.NTT_REPLY,
            VN.EMAIL,
            VN.PHONE,
            VN.OPINION_TITLE_HEAD,
            VN.LINK_URL,
            IF(VN.NOTICE_AT = 'Y', TRUE, FALSE)       AS NOTICE,
            IF(VN.FRST_REGISTER_ID IS NULL, TRUE, FALSE) ANONYMOUS_WRITER,
            VA.ATCH_FILE_ID,
            CONCAT(VA.ORIGNL_FILE_NM, '.' , VA.FILE_EXTSN) AS ORIGNL_FILE_NM,
            (SELECT T.BBS_NM FROM VST_BBS T WHERE T.BBS_ID = VN.BBS_ID) AS BBS_NM
        FROM VST_NTT VN
        LEFT OUTER JOIN VST_ATCHFILE VA ON VN.NTT_ID = VA.UPPER_ID
        WHERE VN.NTT_ID = #{nttId} AND VN.USE_AT = 'Y'
	</select>
	
	<select id="getBoardView2" parameterType="HashMap" resultType="HashMap">
		SELECT 
			a.NTT_ID AS board_no, 
			a.NTT_SJ AS board_title, 
			a.NTT_CN AS board_content, 
			a.NTT_STATUS AS board_status, 
			CAST(DATE_FORMAT(a.FRST_REGIST_DT, '%Y-%m-%d') AS CHAR) AS insert_dt,
			a.FRST_REGISTER_ID AS insert_id, 
			DATE_FORMAT(a.LAST_UPDT_DT,'%Y-%m-%d') update_dt,
			a.LAST_UPDUSR_ID AS update_id,
			a.NAME AS name,
			a.LINK_URL AS link_url,
			a.PHONE AS phone
		FROM VST_NTT a
		WHERE 1=1
		  AND BBS_ID = #{board_type}
		  AND NTT_ID = #{board_no}
		  AND NTT_PWD = #{board_pwd}
		  AND USE_AT = 'Y'
	</select>
	
	<select id="getNewsView" parameterType="HashMap" resultType="HashMap">
		SELECT 
			a.board_no, 
			a.board_title, 
			a.board_content, 
			a.reply_content,
			a.board_status, 
			DATE_FORMAT(a.insert_dt,'%Y-%m-%d') insert_dt,
			a.insert_id, 
			DATE_FORMAT(a.update_dt,'%Y-%m-%d') update_dt,
			a.update_id,
			a.main_img_file_name,
			a.detail_img_file_name,
			ifnull(a.file_name, '') file_name,
			a.name,
			a.phone,
			a.link_url,
			a.youtube_url
		FROM board a
		where 1=1
		  and board_type = #{board_type}
		  and board_no = #{board_no}
		  and USE_AT = 'Y'
		  and del_yn = 'N'
	</select>	

	<select id="getNewsNextPrev" parameterType="HashMap" resultType="HashMap">
  	(SELECT board_type, board_no, board_title, 'next' view_type FROM board where 
  	board_type = #{board_type} and USE_AT = 'Y' and del_yn = 'N' and board_no &gt; #{board_no} order by board_no limit 1)
  	UNION ALL
  	(SELECT board_type, board_no, board_title, 'prev' view_type FROM board where
  	board_type = #{board_type} and USE_AT = 'Y' and del_yn = 'N' and board_no &lt; #{board_no} order by board_no desc limit 1)

		  
	</select>	
	
	<select id="chkBoardPassword" parameterType="HashMap" resultType="Integer">
		SELECT 
			COUNT(*)
		FROM VST_NTT a
		WHERE 1=1
		AND a.USE_AT = 'Y'
		  AND BBS_ID = #{board_type}
		  AND NTT_ID = #{board_no}
		  AND NTT_PWD = #{board_pwd}
	</select>
	
	<update id="boardDelete">
		UPDATE VST_NTT SET USE_AT = 'N' WHERE NTT_ID = #{board_no}
	</update>
	
	<insert id="setBoard" parameterType="HashMap">
		INSERT INTO board 
		(
			board_title, 
			board_content, 
			board_status, 
			insert_dt, 
			insert_id, 
			board_type
		)
		VALUES
		(
			#{board_title}, 
			#{board_content}, 
			#{board_status}, 
			now(), 
			#{request_id}, 
			#{board_type}
		)
		ON DUPLICATE KEY UPDATE
		board_title = #{board_title},
		board_content = #{board_content},
		board_status = #{board_status}
	</insert>
	
	<insert id="setBoardFile" parameterType="HashMap">
		INSERT INTO board 
		(
			<if test="board_type == 22">
				name,
				email,
				phone,
			</if>
			<if test="board_type == 20">
				name,
				phone,
				link_url,
				main_img_file_name,
			</if>
			board_title, 
			board_content, 
			board_status, 
			insert_dt, 
			insert_id, 
			board_type,
			file_name,
			USE_AT,
			board_pwd
		)
		VALUES
		(
			<if test="board_type == 22">
				#{name},
				#{email},
				#{phone},
			</if>
			<if test="board_type == 20">
				#{name},
				#{phone},
				#{link_url},
				#{main_img_file_name},
			</if>
			#{board_title}, 
			#{board_content}, 
			0, 
			now(), 
			#{board_author}, 
			#{board_type},
			#{file_name},
			'Y',
			#{board_pwd}

		)
		ON DUPLICATE KEY UPDATE
		board_title = #{board_title},
		board_content = #{board_content},
		board_status = #{board_status}
	</insert>
	
	<insert id="setBoardFileUpdate" parameterType="HashMap">
		UPDATE board SET 
			board_title = #{board_title}, 
			board_content = #{board_content}, 
			update_dt = now(), 
			insert_id = #{board_author}, 
			file_name = #{file_name},
			<if test="main_img_file_name != NULL">
				main_img_file_name = #{main_img_file_name},
			</if>
			board_pwd = #{board_pwd},
			name = #{name},
			link_url = #{link_url},
			phone = #{phone}
		WHERE 1=1
			and board_type = #{board_type}
			and board_no = #{board_no}
	</insert>
	
	<select id="getProhibitiveWordList" resultType="HashMap">
		SELECT 
			WORD
		FROM VST_PROHIBITIVEWORD
		WHERE 1=1
		  AND USE_AT = 'Y'
	</select>
	
	<insert id="insertOpinion" parameterType="HashMap">
		INSERT INTO tbl_cusopi 
		(
		    customer_name,
		    customer_email,
		    customer_hp,
		    customer_cp_name,
		    inquery_area,
		    customer_address1,
		    customer_address2,
		    customer_address3,
		    opinion_title,
		    opinion_content,
		    feedback_yn,
		    attached_file_name,
		    privacy_aggrement_yn,
		    insert_dt
		)
		VALUES
		(
		    #{customer_name},
		    #{customer_email},
		    #{customer_hp},
		    #{customer_cp_name},
		    #{inquery_area},
		    #{customer_address1},
		    #{customer_address2},
		    #{customer_address3},
		    #{opinion_title},
		    #{opinion_content},
		    #{feedback_yn},
		    #{attached_file_name},
		    #{privacy_aggrement_yn},
			now()
		)
		ON DUPLICATE KEY UPDATE
		customer_name = #{customer_name},
		opinion_title = #{opinion_title},
		opinion_content = #{opinion_content}
	</insert>
	
	<insert id="insertReport" parameterType="HashMap">
		INSERT INTO tbl_report
		(
		    author_name,
		    author_email,
		    author_hp,
		    opinion_title_head,
		    opinion_title,
		    opinion_content,
		    attached_file_name,
		    insert_dt,
		    status
		)
		VALUES
		(
		    #{author_name},
		    #{author_email},
		    #{author_hp},
		    #{opinion_title_head},
		    #{opinion_title},
		    #{opinion_content},
		    #{attached_file_name},
			now(),
			"0"
		)
		ON DUPLICATE KEY UPDATE
		author_name = #{author_name},
		opinion_title = #{opinion_title},
		opinion_content = #{opinion_content}
	</insert>
	
	<select id="getBoardFileList" parameterType="HashMap" resultType="HashMap">
		SELECT 
			board_files_no,
			file_name
		FROM 
			tbl_board_files
		WHERE
			board_no = #{board_no}
	</select>
	
	
	<select id="getSearchAllBoardList" parameterType="HashMap" resultType="HashMap">
		SELECT 
			a.board_no, 
			a.board_title 'title', 
			a.board_content 'value', 
			a.board_status, 
			DATE_FORMAT(a.insert_dt,'%Y-%m-%d') insert_dt,
			a.insert_id, 
			DATE_FORMAT(a.update_dt,'%Y-%m-%d') update_dt,
			a.update_id,
			a.file_name,
			ifnull(max(b.file_name),'') file_name2,
			board_type
		FROM board a  left outer join tbl_board_files b on a.board_no = b.board_no
		where 1=1
		  and USE_AT = 'Y'
		  and del_yn = 'N'
	   <if test="sSearch != null and sSearch != ''">
			  and (a.board_title like CONCAT('%', #{sSearch}, '%') 
			  	or a.board_content like CONCAT('%', #{sSearch}, '%')
			  )
		</if>
		order by a.insert_dt desc

	</select>
	
	<insert id="insertConscience" parameterType="HashMap">
		INSERT INTO tbl_conscience 
		(
		    cn_name,
		    cn_division,
		    cn_hp,
		    cn_enum,
		    cn_content,
		    attached_file_name,
		    insert_dt,
		    agreeYn
		)
		VALUES
		(
		    #{cn_name},
		    #{cn_division},
		    #{cn_hp},
		    #{cn_enum},
		    #{cn_content},
		    #{attached_file_name},
			now(),
			#{agreeYn}
		)
		ON DUPLICATE KEY UPDATE
		cn_name = #{cn_name},
		cn_content = #{cn_content}
	</insert>
	
	
</mapper>